#include "subscriptor.h"
#include "comun.h"
#include "edsu_comun.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <error.h>
#include <pthread.h>



int alta_subscripcion_tema(const char *tema) {
  /*CONEXION SOLICITANDO ALTA*/
  
  int sockfd, n;
  char localhost[50];
  struct mensaje *msg;

  /*Inicializar variables*/
  sockfd = 0;
  
  /* Montar conexión TCP con servidor */
  if ((sockfd = makeConnection(sockfd)) < 0){
    return -1;
  }

  
  /*Enviamos mensaje solicitando alta*/
  gethostname(localhost,sizeof(localhost));
  bzero((char *) &msg, sizeof(msg));
  msg->tema = (char *)tema;
  msg->peticion = htonl(0);
  msg->host = localhost;

  if((n = enviarMensaje(sockfd, msg)) < 0){
    return -1;
  }
  
  /*Esperamos el mensaje de respuesta del intermediario.*/
  if((n = recibirMensaje(sockfd, msg)) < 0){
    close(sockfd);
    return -1;
  }
  /*Comprobamos la respuesta recibida*/
  if(strcmp(msg->evento,"Error: el tema no existe") == 0){
    /*Error del tema*/
    close(sockfd);
    return -1;
  }
  
  else if (strcmp(msg->evento,"Alta finalizada") == 0){
  /*La operación se ha llevado a cabo con éxito.*/
  close(sockfd);
  return 0;
  }  
  else{
    /*Otro mensaje, incorrecto.*/
    close(sockfd);
    return -1;  
  }  
}

int baja_subscripcion_tema(const char *tema) {
  /*CONEXION SOLICITANDO BAJA*/
  int sockfd, n;
  struct mensaje *msg;  
  char  localhost[50];

  /*Inicializar variables*/
  sockfd = 0;
  
  /* Montar conexión TCP con servidor */
  if ((sockfd = makeConnection(sockfd)) < 0){
    return -1;
  }
  
  /*Enviamos mensaje solicitando alta*/
  gethostname(localhost,sizeof(localhost));
  bzero((char *) &msg, sizeof(msg));
  msg->tema = (char *)tema;
  msg->peticion = htonl(1);
  msg->host = localhost;

  if((n = enviarMensaje(sockfd, msg)) < 0){
    return -1;
  }
  
  /*Esperamos el mensaje de respuesta del intermediario.*/
  if((n = recibirMensaje(sockfd, msg)) < 0){
    close(sockfd);
    return -1;
  }
  /*Comprobamos la respuesta recibida*/
  if(strcmp(msg->evento,"Error: el tema no existe") == 0){
    /*Error del tema*/
    close(sockfd);
    return -1;
  }
  
  else if (strcmp(msg->evento,"Error: no estas subscrito al tema indicado") == 0){
    /*Error de subscripcion*/
    close(sockfd);
    return -1;
  }
  else if (strcmp(msg->evento,"Baja realizada") == 0){
    /*Baja realizada con exito*/
    close(sockfd);
    return 0;
  }  
  else{
    /*Otro mensaje, incorrecto.*/
    close(sockfd);
    return -1;  
  }  
}

int inicio_subscriptor(void (*notif_evento)(const char *, const char *),
		       void (*alta_tema)(const char *),
		       void (*baja_tema)(const char *)) {
  
  /*Ejecutamos thread a utilizar para recibir eventos*/
  pthread_t id;
  int n ;
  
  n = pthread_create(&(id), NULL, (void *)threadStuff, notif_evento);
 
  if (n != 0){
    perror("Error al crear el thread\n");
    return -1;
  }
  /*Inicialización con éxito.*/
  printf("Subscriptor inicializado\n");
  return 0;
}


int fin_subscriptor() {
  return 0;
}

/*Función auxiliar que es ejecutada por el thread.*/
int threadStuff(void (*funcion)(const char *, const char *)){
  
  int sockfd, newsockfd, puerto, aux, interlen;
  char  evento[50];
  struct mensaje *msg;
  struct sockaddr_in sub_addr, inter_addr;
  
  static void (**functionPtr)(const char *theme, const char *event);

  /*Montamos el socket para escuchar*/
  puerto = atoi(getenv("PUERTO"));  

  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if(sockfd < 0){
    perror("fallo al montar socket");
    return -1;
  }
  bzero((char *) &sub_addr, sizeof(sub_addr));
  
  sub_addr.sin_family = AF_INET;
  sub_addr.sin_port = htons(puerto);
  sub_addr.sin_addr.s_addr = INADDR_ANY;

  if (bind(sockfd, (struct sockaddr *) &sub_addr,sizeof(sub_addr)) < 0){
    perror("ERROR on binding");
    close(sockfd);
    return -1;
  }
  /*El sistema ya escucha peticiones por el puerto*/
  listen(sockfd, 5);

  /*Bucle para escuchar los eventos que lleguen*/
  while(1){
    
    /*Aceptamos una conexión*/
    interlen = sizeof(inter_addr);
     if((newsockfd = accept(sockfd, (struct sockaddr *)&inter_addr,
			    (socklen_t *) &interlen)) < 0){
      perror("error al recibir un mensaje");
      close(newsockfd);
      continue;
    }
    
    /*recibimos un mensaje*/
    bzero((char *) &msg, sizeof(msg));     
    if((aux = recibirMensaje(newsockfd, msg)) < 0){
      close(newsockfd);
      continue;
    }        
    /*Leemos el evento recibido*/
    strcpy(evento, msg->evento);
    
    /*Notificamos la llegada del evento*/
    functionPtr = &funcion;
    (*functionPtr)(msg->tema, msg->evento);
    /*Cerramos la conexion.*/
    close(newsockfd);
  }
  close(sockfd);
  return 0;
}
