#include "editor.h"
#include "comun.h"
#include "edsu_comun.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <error.h>

int generar_evento(const char *tema, const char *valor) {
 	
  int sockfd, n, aux;
  msg_t msg;
  /*Inicializar variables*/
  sockfd = 0;
    
  /* Montar conexión TCP con servidor */
  if ((aux = makeConnection(sockfd)) < 0){
    return -1;
  }

  /*Enviamos mensaje de  evento.*/
  bzero((char *) &msg, sizeof(msg));
  msg.tema = (char *)tema;
  msg.evento = (char *)valor;
  /*strcpy(msg.tema, tema);*/   
  /*strcpy(msg.evento,valor);*/
  /* msg.peticion = htons(2); */
  msg.peticion = 2;
  printf("el valor es %d\n",msg.peticion);
  if((n = enviarMensaje(sockfd, msg)) < 0){
    return -1;
  }
  
  /*Esperamos a recibir respuesta del intermediario*/
  if((n = recibirMensaje(sockfd, msg)) < 0){
    close(sockfd);
    return -1;
  }
  /*Comprobamos la respuesta recibida*/
  
  if(strcmp(msg.evento,"Error: el tema no existe") == 0){
    /*Error al enviar el tema*/
    close(sockfd);
    return -1;
  }
  else if (strcmp(msg.evento,"Evento enviado") == 0){
  /*La operación se ha llevado a cabo con éxito.*/
  close(sockfd);
  return 0;
  }
  else{
    /*Otro mensaje, incorrecto.*/
    close(sockfd);
    return -1;
  
  }
}

/* solo para la version avanzada */
int crear_tema(const char *tema) {
	return 0;
}

/* solo para la version avanzada */
int eliminar_tema(const char *tema) {
	return 0;
}

