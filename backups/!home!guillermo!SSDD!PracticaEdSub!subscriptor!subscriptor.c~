#include "subscriptor.h"
#include "comun.h"
#include "edsu_comun.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <error.h>
#include <pthread.h>


int alta_subscripcion_tema(const char *tema) {
  /*CONEXION SOLICITANDO ALTA*/
  
  int sockfd, puerto, n;
  char *servidor, localhost[50];
  struct mensaje *msg;
  struct sockaddr_in inter_addr; 
  struct hostent *server;
  
  /* Montar conexión TCP con servidor */ 
  sockfd = socket(AF_INET, SOCK_STREAM, 0);

  if(sockfd < 0){
    perror ("Error opening socket");
    return -1 ;
  }
  
  /* Obtener puerto y servidor de las variables de entorno */
  puerto = atoi(getenv("PUERTO"));  
  servidor = getenv("SERVIDOR");
  server = gethostbyname(servidor);

  
  if (server == NULL){
    fprintf(stderr,"ERROR, no such host\n");
    close(sockfd);
    return -1;
  }
  
  bzero((char *) &inter_addr, sizeof(inter_addr));
  
  inter_addr.sin_family = AF_INET;
  bcopy((char *)server->h_addr, 
         (char *)&inter_addr.sin_addr.s_addr,
         server->h_length);
  inter_addr.sin_port = htons(puerto);
  
  /*Connect*/
  if (connect(sockfd, (struct sockaddr *)&inter_addr, sizeof(inter_addr)) < 0){
        perror("ERROR connecting");
	close(sockfd);
	return -1;
  }
  
  /*Enviamos mensaje solicitando alta*/
  gethostname(localhost,sizeof(localhost));
  bzero((char *) &msg, sizeof(msg));
  msg->tema = (char *)tema;
  msg->peticion = htonl(0);
  msg->host = localhost;

  if((n = enviarMensaje(sockfd, msg)) < 0){
    return -1;
  }
  
  /*Esperamos el mensaje de respuesta del intermediario.*/
  if((n = recibirMensaje(sockfd, msg)) < 0){
    close(sockfd);
    return -1;
  }
  /*Comprobamos la respuesta recibida*/
  if(strcmp(msg->evento,"Error: el tema no existe") == 0){
    /*Error del tema*/
    close(sockfd);
    return -1;
  }
  
  else if (strcmp(msg->evento,"Alta finalizada") == 0){
  /*La operación se ha llevado a cabo con éxito.*/
  close(sockfd);
  return 0;
  }  
  else{
    /*Otro mensaje, incorrecto.*/
    close(sockfd);
    return -1;  
  }  
}

int baja_subscripcion_tema(const char *tema) {
  /*CONEXION SOLICITANDO BAJA*/
  int sockfd, puerto, n;
  char *servidor, localhost[50];
  struct mensaje *msg;
  struct sockaddr_in inter_addr; 
  struct hostent *server;
  
  /* Montar conexión TCP con servidor */ 
  sockfd = socket(AF_INET, SOCK_STREAM, 0);

  if(sockfd < 0){
    perror ("Error opening socket");
    return -1 ;
  }
  
  /* Obtener puerto y servidor de las variables de entorno */
  puerto = atoi(getenv("PUERTO"));  
  servidor = getenv("SERVIDOR");
  server = gethostbyname(servidor);

  if (server == NULL){
    fprintf(stderr,"ERROR, no such host\n");
    close(sockfd);
    return -1;
  }
  
  bzero((char *) &inter_addr, sizeof(inter_addr));
  
  inter_addr.sin_family = AF_INET;
  bcopy((char *)server->h_addr, 
         (char *)&inter_addr.sin_addr.s_addr,
         server->h_length);
  inter_addr.sin_port = htons(puerto);
  
  /*Connect*/
  if (connect(sockfd, (struct sockaddr *)&inter_addr, sizeof(inter_addr)) < 0){
        perror("ERROR connecting");
	close(sockfd);
	return -1;
  }
  
  /*Enviamos mensaje solicitando alta*/
  gethostname(localhost,sizeof(localhost));
  bzero((char *) &msg, sizeof(msg));
  msg->tema = (char *)tema;
  msg->peticion = htonl(1);
  msg->host = localhost;

  if((n = enviarMensaje(sockfd, msg)) < 0){
    return -1;
  }
  
  /*Esperamos el mensaje de respuesta del intermediario.*/
  if((n = recibirMensaje(sockfd, msg)) < 0){
    close(sockfd);
    return -1;
  }
  /*Comprobamos la respuesta recibida*/
  if(strcmp(msg->evento,"Error: el tema no existe") == 0){
    /*Error del tema*/
    close(sockfd);
    return -1;
  }
  
  else if (strcmp(msg->evento,"Error: no estas subscrito al tema indicado") == 0){
    /*Error de subscripcion*/
    close(sockfd);
    return -1;
  }
  else if (strcmp(msg->evento,"Baja realizada") == 0){
    /*Baja realizada con exito*/
    close(sockfd);
    return 0;
  }  
  else{
    /*Otro mensaje, incorrecto.*/
    close(sockfd);
    return -1;  
  }  
}

int inicio_subscriptor(void (*notif_evento)(const char *, const char *),
                void (*alta_tema)(const char *),
                void (*baja_tema)(const char *)) {
  
  /*Declaramos thread a utilizar para recibir eventos*/
  pthread_t id;
  int n ;
  
  
  
  /*AQUI SE MONTA EL THREAD CON EL SOCKET QUE ESCUCHA EVENTOS*/
  return 0;
}

void threadStuff(){
}

int fin_subscriptor() {
  return 0;
}

